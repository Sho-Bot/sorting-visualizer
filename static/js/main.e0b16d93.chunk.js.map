{"version":3,"sources":["sortingAlgorithms/mergeSort.js","sortingAlgorithms/heapSort.js","sortingAlgorithms/quickSort.js","SortingVisualizer/SortingVisualizer.jsx","sortingAlgorithms/bubbleSort.js","App.js","serviceWorker.js","index.js"],"names":["mergeSortAnimations","array","length","animations","elements","i","element","value","index","push","mergeSort","middle","Math","floor","left","slice","right","sortedArray","rangeOfIndices","start","end","finalMerge","nextIndex","shift","highlightElements","values","indices","swap","color","revertElements","alteredElements","type","mergeHelper","heapSortAnimations","maxHeap","bubbeleUp","makeMaxHeap","highlightAnimation","code","heapIndex","temp","j","swapAnimation","alteredAnimation","correctAnimation","revertAnimation","tempIndex","maxElement","unshift","pop","alteredFinalAnimation","bubbleDown","swapElements","childIndex","parentIndex","parentVal","leftIndex","rightIndex","bothValid","leftVal","Animation","revertChildAnimation","rightVal","this","quickSortAnimations","quickSort","pivotIndex","pivot","highlight","revert","highlightAni","swapAni","partitionHoare","finalLeftAnimation","finalRightAnimation","BASE_COLOR","SortingVisualizer","props","state","newArray","min","max","random","setState","arrayBars","document","getElementsByClassName","style","backgroundColor","disableButtons","barOneIdx","barTwoIdx","barOneStyle","barTwoStyle","setTimeout","height","updatedArray","enableButtons","correctElements","finalElement","bubbleSortAnimations","barOneHeight","barTwoHeight","finalIndex","finalBarStyle","display","parentIdx","leftIdx","rightIdx","parentStyle","leftStyle","rightStyle","childStyle","algorithm","buttons","getElementById","disabled","opacity","borderColor","className","class","id","onClick","heapSort","bubbleSort","map","num","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e0b16d93.chunk.js","sourcesContent":["\r\nexport function mergeSortAnimations(array) {\r\n  if(array.length < 2) return array\r\n  const animations = [];\r\n  const elements = [];\r\n  for(let i = 0; i < array.length; i++) {\r\n      let element = {value: array[i], index: i}\r\n      elements.push(element);\r\n  }\r\n  mergeSort(array, elements, animations);\r\n  return animations;\r\n}\r\n\r\n\r\nfunction mergeSort(array, elements, animations) {\r\n  //check if array can be split \r\n  if(elements.length < 2) return elementsr\n  //get middle index\r\n  const middle = Math.floor(elements.length/ 2);\r\n  //split temp array down into left and right components\r\n  let left = elements.slice(0, middle);\r\n  let right = elements.slice(middle);\r\n  //recursively continue spliting arrays\r\n  return mergeHelper(mergeSort(array, left, animations), mergeSort(array, right, animations), animations, array);\r\n}\r\n\r\n\r\nfunction mergeHelper(left, right, animations, array) {\r\n  let sortedArray = [];\r\n  let rangeOfIndices = [];\r\n  let start = left[0].index;\r\n  let end = right[right.length-1].index;\r\n  let finalMerge = ((left.length + right.length) === array.length);\r\n\r\n  for(let i = start; i <= end; i++){\r\n    rangeOfIndices.push(i);\r\n  }\r\n\r\n  while(left.length && right.length) {\r\n    let nextIndex = rangeOfIndices.shift();\r\n\r\n    let highlightElements = {\r\n      values: [left[0].value, right[0].value],\r\n      indices: [nextIndex, right[0].index],\r\n      swap: false,\r\n      color: 'highlight'\r\n    }\r\n    let revertElements = {\r\n      values: [left[0].value, right[0].value],\r\n      index: [right[0].index],\r\n      swap: false,\r\n      color: 'revert'\r\n    }\r\n\r\n    animations.push(highlightElements);\r\n    animations.push(revertElements);\r\n\r\n    if(finalMerge) {\r\n      if(left[0].value <= right[0].value) {\r\n        let element = {value: left[0].value, index: nextIndex, color: 'color'};\r\n        let alteredElements = {value: left[0].value, index: nextIndex, swap: false, color: 'correct'};\r\n        //let revertElements = {type: 'single', value: left[0].value, index: nextIndex, swap: false, color: 'revert'};\r\n\r\n        if(nextIndex === left[0].index) element.swap = false;\r\n        else element.swap = true;\r\n\r\n        left.shift();\r\n        animations.push(element);\r\n        animations.push(alteredElements);\r\n        //animations.push(revertElements);\r\n        sortedArray.push(element);\r\n      }\r\n      else { //(right[0].value < left[0].value)\r\n        let element = {value: right[0].value, index: nextIndex, color: 'color'};\r\n        let alteredElements = {value: right[0].value, index: nextIndex, swap: false, color: 'correct'};\r\n        //let revertElements = {type: 'single', value: right[0].value, index: nextIndex, swap: false, color: 'revert'};\r\n\r\n        if(nextIndex === right[0].index) element.swap = false;\r\n        else element.swap = true;\r\n\r\n        right.shift();\r\n        animations.push(element);\r\n        animations.push(alteredElements);\r\n        //animations.push(revertElements);\r\n        sortedArray.push(element);\r\n      }\r\n\r\n    }\r\n    else {\r\n      if(left[0].value <= right[0].value) {\r\n        let element = {value: left[0].value, index: nextIndex, color: 'color'};\r\n        let alteredElements = {value: left[0].value, index: nextIndex, swap: false, color: 'altered'};\r\n        let revertElements = {type: 'single', value: left[0].value, index: nextIndex, swap: false, color: 'revert'};\r\n\r\n        if(nextIndex === left[0].index) element.swap = false;\r\n        else element.swap = true;\r\n\r\n        left.shift();\r\n        animations.push(element);\r\n        animations.push(alteredElements);\r\n        animations.push(revertElements);\r\n        sortedArray.push(element);\r\n      }\r\n      else { //(right[0].value < left[0].value)\r\n        let element = {\r\n          value: right[0].value,\r\n          index: nextIndex,\r\n          color: 'color'\r\n        };\r\n        let alteredElements = {value: right[0].value, index: nextIndex, swap: false, color: 'altered'};\r\n        let revertElements = {type: 'single', value: right[0].value, index: nextIndex, swap: false, color: 'revert'};\r\n\r\n        if(nextIndex === right[0].index) element.swap = false;\r\n        else element.swap = true;\r\n\r\n        right.shift();\r\n        animations.push(element);\r\n        animations.push(alteredElements);\r\n        animations.push(revertElements);\r\n        sortedArray.push(element);\r\n      }\r\n\r\n    }\r\n\r\n\r\n\r\n    /*\r\n\r\n      let revertElements = {\r\n        type: 'double',\r\n        values: [left[0].value, right[0].value],\r\n        indices: [nextIndex, right[0].index],\r\n        swap: false,\r\n        color: 'revert'\r\n      }\r\n\r\n      animations.push(revertElements);\r\n      \r\n\r\n      if(left[0].value <= right[0].value) {\r\n        let element = {value: left[0].value, index: nextIndex, color: 'color'};\r\n        let alteredElements = {value: left[0].value, index: nextIndex, swap: false, color: 'altered'};\r\n        let revertElements = {type: 'single', value: left[0].value, index: nextIndex, swap: false, color: 'revert'};\r\n\r\n        if(nextIndex === left[0].index) element.swap = false;\r\n        else element.swap = true;\r\n\r\n        left.shift();\r\n        animations.push(element);\r\n        animations.push(alteredElements);\r\n        animations.push(revertElements);\r\n        sortedArray.push(element);\r\n      }\r\n      else { //(right[0].value < left[0].value)\r\n        let element = {\r\n          value: right[0].value,\r\n          index: nextIndex,\r\n          color: 'color'\r\n        };\r\n        let alteredElements = {value: right[0].value, index: nextIndex, swap: false, color: 'altered'};\r\n        let revertElements = {type: 'single', value: right[0].value, index: nextIndex, swap: false, color: 'revert'};\r\n\r\n        if(nextIndex === right[0].index) element.swap = false;\r\n        else element.swap = true;\r\n\r\n        right.shift();\r\n        animations.push(element);\r\n        animations.push(alteredElements);\r\n        animations.push(revertElements);\r\n        sortedArray.push(element);\r\n      }\r\n\r\n      */\r\n  }\r\n      \r\n  //while elements still exist in left and right\r\n  while(left.length) {\r\n\r\n    let nextIndex = rangeOfIndices.shift();\r\n\r\n    let element = {\r\n      value: left[0].value,\r\n      index: nextIndex,\r\n      color: 'color'\r\n    };\r\n\r\n    if(finalMerge) {\r\n\r\n      let alteredElements = {value: left[0].value, index: nextIndex, swap: false, color: 'correct'};\r\n      //let revertElements = {type: 'single', value: left[0].value, index: nextIndex, swap: false, color: 'revert'};\r\n\r\n      if(nextIndex === left[0].index) element.swap = false;\r\n      else element.swap = true;\r\n\r\n      left.shift();\r\n      animations.push(element);\r\n      animations.push(alteredElements);\r\n      //animations.push(revertElements);\r\n    }\r\n    else {\r\n      let alteredElements = {value: left[0].value, index: nextIndex, swap: false, color: 'altered'};\r\n      let revertElements = {type: 'single', value: left[0].value, index: nextIndex, swap: false, color: 'revert'};\r\n\r\n      if(nextIndex === left[0].index) element.swap = false;\r\n      else element.swap = true;\r\n\r\n      left.shift();\r\n      animations.push(element);\r\n      animations.push(alteredElements);\r\n      animations.push(revertElements);\r\n    }\r\n\r\n    sortedArray.push(element);\r\n  }\r\n\r\n  while(right.length){\r\n    let nextIndex = rangeOfIndices.shift();\r\n\r\n    let element = {\r\n      value: right[0].value,\r\n      index: nextIndex,\r\n      color: 'color'\r\n    };\r\n\r\n    if(finalMerge) {\r\n      let alteredElements = {value: right[0].value, index: nextIndex, swap: false, color: 'correct'};\r\n      //let revertElements = {type: 'single', value: right[0].value, index: nextIndex, swap: false, color: 'revert'};\r\n\r\n      if(nextIndex === right[0].index) element.swap = false;\r\n      else element.swap = true;\r\n\r\n      right.shift();\r\n      animations.push(element);\r\n      animations.push(alteredElements);\r\n      //animations.push(revertElements);\r\n    }\r\n    else {\r\n\r\n      let alteredElements = {value: right[0].value, index: nextIndex, swap: false, color: 'altered'};\r\n      let revertElements = {type: 'single', value: right[0].value, index: nextIndex, swap: false, color: 'revert'};\r\n\r\n      if(nextIndex === right[0].index) element.swap = false;\r\n      else element.swap = true;\r\n\r\n      right.shift();\r\n      animations.push(element);\r\n      animations.push(alteredElements);\r\n      animations.push(revertElements);\r\n    }\r\n\r\n\r\n    sortedArray.push(element);\r\n  }\r\n  return sortedArray;\r\n}","export function heapSortAnimations(array) {\r\n    if(array.length < 2) return array;\r\n    const animations = [];\r\n    let maxHeap = makeMaxHeap(array)\r\n\r\n    //this for loop animates the array being ordered into a max heap\r\n    for(let i = 0; i < array.length; i++) {\r\n        let highlightAnimation = {code: 'highlight', indices: [maxHeap[i].index, i]}\r\n        animations.push(highlightAnimation);\r\n\r\n        let heapIndex = maxHeap[i].index;\r\n\r\n        if(heapIndex !== i) {\r\n            let temp = array[i];\r\n            array[i] = maxHeap[i].value;\r\n            array[heapIndex] = temp;\r\n\r\n            for(let j = 0; j < maxHeap.length; j++) {\r\n                if(maxHeap[j].index === i) {\r\n                    maxHeap[j].index = heapIndex;\r\n                }\r\n            }\r\n\r\n            let swapAnimation = {code: 'swap', values: [array[i], array[heapIndex]], indices: [i, heapIndex]}\r\n            let alteredAnimation = {code: 'altered', indices: [i, heapIndex]}\r\n\r\n            animations.push(swapAnimation);\r\n            animations.push(alteredAnimation);\r\n        }\r\n        else {\r\n            let correctAnimation = {code: 'correct', indices: [maxHeap[i].index, i]}\r\n            animations.push(correctAnimation);\r\n        }   \r\n\r\n        let revertAnimation = {code: 'revert', indices: [maxHeap[i].index, i]}\r\n        animations.push(revertAnimation)\r\n\r\n        //set element indeces in maxHeap equal to where they are located in the array\r\n        maxHeap[i].index = i;\r\n        \r\n    }\r\n\r\n    //This is where we begin the heap sort\r\n    while(maxHeap.length > 1) {\r\n        //give element with largest value index of last element in heap\r\n        let tempIndex = maxHeap[0].index;\r\n        //give last element in heap index of 0\r\n        maxHeap[0].index = maxHeap[maxHeap.length-1].index;\r\n        maxHeap[maxHeap.length-1].index = tempIndex;\r\n        //remove element with largest value and replace it the the last element in heap\r\n        let maxElement = maxHeap.shift();\r\n        maxHeap.unshift(maxHeap.pop())\r\n\r\n        //animate the swap, shifted element is now in final position\r\n        let highlightAnimation = {code: 'highlight', indices: [maxElement.index, maxHeap[0].index]}\r\n        let swapAnimation = {code: 'swap', values: [maxElement.value, maxHeap[0].value], indices: [maxElement.index, maxHeap[0].index]}\r\n        let alteredFinalAnimation = {code: 'altered-final', indices: [maxElement.index, maxHeap[0].index]}\r\n\r\n        animations.push(highlightAnimation);\r\n        animations.push(swapAnimation);\r\n        animations.push(alteredFinalAnimation);\r\n        \r\n        //animate root element being bubbled down\r\n        bubbleDown(maxHeap, 0, animations)\r\n\r\n    }\r\n    \r\n    let finalAnimation = {code: 'correct', indices: [0, 0]}\r\n    animations.push(finalAnimation);\r\n\r\n    return animations;\r\n}\r\n\r\n\r\nfunction makeMaxHeap(array) {\r\n    const elements = [];\r\n    for(let i = 0; i < array.length; i++) {\r\n        let element = {value: array[i], index: i}\r\n        elements.push(element);\r\n\r\n        bubbeleUp(elements, elements.length-1)\r\n    }\r\n    return elements;\r\n}\r\n\r\n\r\nfunction swap(elements, i, j) {\r\n    const temp = elements[i];\r\n    elements[i] = elements[j];\r\n    elements[j] = temp;\r\n}\r\n\r\n\r\nfunction swapElements(elements, i, j) {\r\n    const temp = elements[i];\r\n    elements[i] = elements[j];\r\n    elements[j] = temp;\r\n    elements[i].index = i;\r\n    elements[j].index = j;\r\n}\r\n\r\n\r\nfunction bubbeleUp(elements, childIndex) {\r\n    if(childIndex === 0) return;\r\n    const parentIndex = Math.floor((childIndex - 1) / 2);\r\n    const parentVal = elements[parentIndex].value;\r\n    const childVal = elements[childIndex].value;\r\n\r\n    if(childVal > parentVal) { // Max Heap\r\n        // swap values\r\n        swap(elements, childIndex, parentIndex);\r\n        //parent and child have swaped, so parent needs to be considered for bubble up\r\n        bubbeleUp(elements, parentIndex);\r\n    }\r\n}\r\n\r\n\r\nfunction bubbleDown(elements, parentIndex, animations) {\r\n    const leftIndex = (parentIndex*2) + 1;\r\n    const rightIndex = leftIndex + 1;\r\n    let parentVal = elements[parentIndex].value;\r\n    let bothValid = false;\r\n\r\n    if(0 < leftIndex && leftIndex < elements.length && 0 < rightIndex && rightIndex < elements.length) {\r\n        bothValid = true;\r\n        //animations.push(highlightAnimation);\r\n    }\r\n\r\n    if(0 < leftIndex && leftIndex < elements.length) {\r\n        const leftVal = elements[leftIndex].value;\r\n\r\n        //switch needs to occur\r\n        if(parentVal < leftVal) {\r\n            //Left and right children exist\r\n            if(bothValid) {\r\n                let highlightAnimation = new Animation({code: 'parent-child-highlight', indices: [parentIndex, leftIndex, rightIndex]});\r\n                let revertChildAnimation = new Animation({code: 'child-revert', indices: rightIndex});\r\n                let swapAnimation = new Animation( {code: 'swap', values: [leftVal, parentVal], indices: [parentIndex, leftIndex]});\r\n                let alteredAnimation = new Animation({code: 'altered', indices: [parentIndex, leftIndex]});\r\n                let revertAnimation = new Animation({code: 'revert', indices: [parentIndex, leftIndex]});\r\n\r\n                animations.push(highlightAnimation);\r\n                animations.push(revertChildAnimation);\r\n                animations.push(swapAnimation);\r\n                animations.push(alteredAnimation);\r\n                animations.push(revertAnimation);\r\n\r\n                swapElements(elements, parentIndex, leftIndex);\r\n                //console.log(elements[parentIndex].index + \"  \" + elements[parentIndex].value);\r\n                //console.log(elements[leftIndex].index + \"  \" + elements[leftIndex].value);\r\n                bubbleDown(elements, elements[leftIndex].index, animations)\r\n                parentVal = elements[parentIndex].value;\r\n            }\r\n            else { //only left child exists\r\n                let highlightAnimation = new Animation({code: 'highlight', indices: [parentIndex, leftIndex]});\r\n                let swapAnimation = new Animation( {code: 'swap', values: [leftVal, parentVal], indices: [parentIndex, leftIndex]});\r\n                let alteredAnimation = new Animation({code: 'altered', indices: [parentIndex, leftIndex]});\r\n                let revertAnimation = new Animation({code: 'revert', indices: [parentIndex, leftIndex]});\r\n                \r\n                animations.push(highlightAnimation);\r\n                animations.push(swapAnimation);\r\n                animations.push(alteredAnimation);\r\n                animations.push(revertAnimation);\r\n\r\n                swapElements(elements, parentIndex, leftIndex);\r\n                bubbleDown(elements, elements[leftIndex].index, animations)\r\n                parentVal = elements[parentIndex].value;\r\n            }\r\n        }\r\n    }\r\n    if(0 < rightIndex && rightIndex < elements.length) {\r\n        const rightVal = elements[rightIndex].value;\r\n\r\n        //switch needs to occur\r\n        if(parentVal < rightVal) {\r\n\r\n            //Left and right children exist\r\n            if(bothValid) {\r\n                let revertChildAnimation = new Animation({code: 'child-revert', indices: leftIndex});\r\n                let swapAnimation = new Animation( {code: 'swap', values: [rightVal, parentVal], indices: [parentIndex, rightIndex]});\r\n                let alteredAnimation = new Animation({code: 'altered', indices: [parentIndex, rightIndex]});\r\n                let revertAnimation = new Animation({code: 'revert', indices: [parentIndex, rightIndex]});\r\n\r\n                animations.push(revertChildAnimation);\r\n                animations.push(swapAnimation);\r\n                animations.push(alteredAnimation);\r\n                animations.push(revertAnimation);\r\n\r\n                swapElements(elements, parentIndex, rightIndex);\r\n                bubbleDown(elements, elements[rightIndex].index, animations)\r\n            }\r\n            else { //only right child exists\r\n                let highlightAnimation = new Animation({code: 'highlight', indices: [parentIndex, rightIndex]});\r\n                let swapAnimation = new Animation( {code: 'swap', values: [rightVal, parentVal], indices: [parentIndex, rightIndex]});\r\n                let alteredAnimation = new Animation({code: 'altered', indices: [parentIndex, rightIndex]});\r\n                let revertAnimation = new Animation({code: 'revert', indices: [parentIndex, rightIndex]});\r\n\r\n                animations.push(highlightAnimation);\r\n                animations.push(swapAnimation);\r\n                animations.push(alteredAnimation);\r\n                animations.push(revertAnimation);\r\n\r\n                swapElements(elements, parentIndex, rightIndex);\r\n                bubbleDown(elements, elements[rightIndex].index, animations)\r\n            }\r\n        }\r\n    }\r\n}   \r\n\r\n\r\nfunction Animation({code, values, indices} = {}) {\r\n    this.code = code;\r\n    this.values = values; \r\n    this.indices = indices;\r\n}","export function quickSortAnimations(array) {\r\n    let animations = [];\r\n\r\n    return(quickSort(array, 0, array.length-1, animations)[1]);\r\n}\r\n\r\nfunction quickSort(array, left, right, animations) {\r\n\r\n    if(left < right) {\r\n        const pivotIndex = partitionHoare(array, left, right, animations)\r\n\r\n\r\n        quickSort(array, left, pivotIndex-1, animations);\r\n        let finalLeftAnimation = {code: 'final', indices: left}\r\n        animations.push(finalLeftAnimation);\r\n        quickSort(array, pivotIndex+1, right, animations);\r\n        let finalRightAnimation = {code: 'final', indices: right}\r\n        animations.push(finalRightAnimation);\r\n        \r\n\r\n    }\r\n\r\n    return [array, animations];\r\n}\r\n\r\nfunction partitionHoare(array, left, right, animations) {\r\n    const pivot = Math.floor((left + right) / 2);\r\n\r\n    //put pivot element at back of the array;\r\n    [array[pivot], array[right]] = [array[right], array[pivot]];\r\n\r\n    let highlightAnimation = {code: 'highlight', indices: [pivot, right]}\r\n    let swapAnimation = {code: 'swap', values: [array[pivot], array[right]], indices: [pivot, right]}\r\n    let revertAnimation = {code: 'revert', indices: [pivot, right]}\r\n\r\n    animations.push(highlightAnimation);\r\n    animations.push(swapAnimation);\r\n    animations.push(revertAnimation);\r\n    \r\n    let i = left - 1;\r\n    for(let j = left; j < right; j++) {\r\n        let highlight = {code: 'highlight', indices: [i+1, j]}\r\n        animations.push(highlight);\r\n\r\n        if(array[j] <= array[right]) {\r\n            i++;\r\n            [array[i], array[j]] = [array[j], array[i]];\r\n\r\n            let swapAnimation = {code: 'swap', values: [array[i], array[j]], indices: [i, j]}\r\n            let alteredAnimation = {code: 'altered', indices: [i, j]}\r\n            let revertAnimation = {code: 'revert', indices: [i, j]}\r\n\r\n            animations.push(swapAnimation);\r\n            animations.push(alteredAnimation);\r\n            animations.push(revertAnimation);\r\n        }\r\n        else {\r\n            let revert = {code: 'revert', indices: [i+1, j]}\r\n            animations.push(revert);\r\n        }\r\n    }\r\n    //swap pivot back into final position\r\n    [array[i+1], array[right]] = [array[right], array[i+1]];\r\n\r\n    let highlightAni = {code: 'highlight', indices: [i+1, right]}\r\n    let swapAni = {code: 'swap', values: [array[i+1], array[right]], indices: [i+1, right]}\r\n    let alteredFinalAnimation = {code: 'altered-final', indices: [i+1, right]}\r\n\r\n    animations.push(highlightAni);\r\n    animations.push(swapAni);\r\n    animations.push(alteredFinalAnimation);\r\n\r\n    return i+1;\r\n}","import React from 'react';\r\nimport {mergeSortAnimations} from '../sortingAlgorithms/mergeSort.js'\r\nimport {bubbleSortAnimations} from '../sortingAlgorithms/bubbleSort.js'\r\nimport {heapSortAnimations} from '../sortingAlgorithms/heapSort.js'\r\nimport {quickSortAnimations} from '../sortingAlgorithms/quickSort.js' \r\nimport './SortingVisualizer.css';\r\n\r\n// Change this value for the speed of the animations.\r\nconst ANIMATION_SPEED_MS = 1;\r\n\r\n// Change this value for the number of bars (value) in the array.\r\nlet NUMBER_OF_ARRAY_BARS = 150;\r\n\r\n// This is the default color of the array bars.\r\nconst BASE_COLOR = 'lightslategrey' //'#f0f0f0';\r\n\r\n// This is the color of array bars that are being compared throughout the animations.\r\nconst HIGHLIGHT_COLOR = '#fc5185';\r\n\r\n//This is the color of the array bars that are being updated with a new height value.\r\nconst ALTERED_COLOR = '#43dde6';\r\n\r\n//This is the color of the array bars that are maintaining their original height value.\r\nconst CORRECT_COLOR = '#a7ff83';\r\n\r\n    \r\n\r\nexport default class SortingVisualizer extends  React.Component {\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            array: []\r\n        };\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        this.newArray();\r\n    }\r\n\r\n\r\n    newArray() {\r\n          const newArray = [];\r\n        for(let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\r\n            newArray.push(randomInt(5,500));\r\n        }\r\n        \r\n        this.setState({array: newArray});\r\n\r\n        //reset array color to base color\r\n        const arrayBars = document.getElementsByClassName('array-bar');\r\n        for(let i = 0; i < arrayBars.length; i++) {\r\n            arrayBars[i].style.backgroundColor = BASE_COLOR;\r\n        }\r\n    }\r\n\r\n\r\n    mergeSort() {\r\n        this.disableButtons('mergeSort');\r\n        const animations = mergeSortAnimations(this.state.array);\r\n        const arrayBars = document.getElementsByClassName('array-bar')\r\n\r\n        for(let i = 0; i < animations.length; i++) {\r\n\r\n            if(animations[i].swap === false) {\r\n                if(animations[i].color === 'highlight') {\r\n                    const [barOneIdx, barTwoIdx] = animations[i].indices;\r\n                    const barOneStyle = arrayBars[barOneIdx].style;\r\n                    const barTwoStyle = arrayBars[barTwoIdx].style;\r\n                    setTimeout(() => {\r\n                        barOneStyle.backgroundColor = HIGHLIGHT_COLOR;\r\n                        barTwoStyle.backgroundColor = HIGHLIGHT_COLOR;\r\n                    }, i*ANIMATION_SPEED_MS);\r\n                }\r\n                else if(animations[i].color === 'altered') {\r\n                    const barOneIdx = animations[i].index;\r\n                    const barOneStyle = arrayBars[barOneIdx].style;\r\n                    setTimeout(() => {\r\n                        barOneStyle.backgroundColor = ALTERED_COLOR;\r\n                    }, i*ANIMATION_SPEED_MS);\r\n                }\r\n                else if(animations[i].color === 'correct') {\r\n                    const barOneIdx = animations[i].index;\r\n                    const barOneStyle = arrayBars[barOneIdx].style;\r\n                    setTimeout(() => {\r\n                        barOneStyle.backgroundColor = CORRECT_COLOR;\r\n                    }, i*ANIMATION_SPEED_MS);\r\n                }\r\n                else if(animations[i].color === 'revert') {\r\n                    if(animations[i].type === 'double') {\r\n                        const [barOneIdx, barTwoIdx] = animations[i].indices;\r\n                        const barOneStyle = arrayBars[barOneIdx].style;\r\n                        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n                        setTimeout(() => {\r\n                            barOneStyle.backgroundColor = BASE_COLOR;\r\n                            barTwoStyle.backgroundColor = BASE_COLOR;\r\n                        }, i*ANIMATION_SPEED_MS);\r\n                    }\r\n                    else {\r\n                        const barOneIdx = animations[i].index;\r\n                        const barOneStyle = arrayBars[barOneIdx].style;\r\n            \r\n                        setTimeout(() => {\r\n                            barOneStyle.backgroundColor = BASE_COLOR;\r\n                        }, i*ANIMATION_SPEED_MS);\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                const barOneIdx = animations[i].index;\r\n                const barOneStyle = arrayBars[barOneIdx].style;\r\n                \r\n                setTimeout(() => {\r\n                    let height = animations[i].value;\r\n                    barOneStyle.height = `${height}px`;\r\n                }, i*ANIMATION_SPEED_MS)\r\n            }\r\n        }\r\n\r\n        let updatedArray = [];\r\n        //const arrayBars = document.getElementsByClassName('array-bar')\r\n        for(let i = 0; i < this.state.array.length; i++) {\r\n            updatedArray.push(arrayBars[i].style.height);\r\n        }\r\n        this.setState({array: updatedArray});\r\n        \r\n        setTimeout(() => {\r\n            this.enableButtons('mergeSort');\r\n        }, (animations.length*ANIMATION_SPEED_MS));\r\n    }\r\n      \r\n\r\n    bubbleSort() {\r\n        this.disableButtons('bubbleSort');\r\n        const animations = bubbleSortAnimations(this.state.array);\r\n        const arrayBars = document.getElementsByClassName('array-bar')\r\n\r\n        for(let i = 0; i < animations.length; i++) {\r\n            if(animations[i].code === 'highlight') {\r\n                const [barOneIdx, barTwoIdx] = animations[i].indices;\r\n                const barOneStyle = arrayBars[barOneIdx].style;\r\n                const barTwoStyle = arrayBars[barTwoIdx].style;\r\n                setTimeout(() => {\r\n                    barOneStyle.backgroundColor = HIGHLIGHT_COLOR;\r\n                    barTwoStyle.backgroundColor = HIGHLIGHT_COLOR;\r\n                }, i*ANIMATION_SPEED_MS);\r\n            }\r\n            else if(animations[i].code === 'swap') {\r\n                const [barOneIdx, barTwoIdx] = animations[i].indices;\r\n                const barOneStyle = arrayBars[barOneIdx].style;\r\n                const barTwoStyle = arrayBars[barTwoIdx].style;\r\n                const [barOneHeight, barTwoHeight] = animations[i].values;\r\n                setTimeout(() => {\r\n                    barOneStyle.height = `${barOneHeight}px`;\r\n                    barTwoStyle.height = `${barTwoHeight}px`;\r\n                }, i*ANIMATION_SPEED_MS);\r\n            }\r\n            else if(animations[i].code === 'correct') {\r\n                const [barOneIdx, barTwoIdx] = animations[i].indices;\r\n                const barOneStyle = arrayBars[barOneIdx].style;\r\n                const barTwoStyle = arrayBars[barTwoIdx].style;\r\n                setTimeout(() => {\r\n                    barOneStyle.backgroundColor = CORRECT_COLOR;\r\n                    barTwoStyle.backgroundColor = CORRECT_COLOR;\r\n                }, i*ANIMATION_SPEED_MS);\r\n            }\r\n            else if(animations[i].code === 'altered') {\r\n                const [barOneIdx, barTwoIdx] = animations[i].indices;\r\n                const barOneStyle = arrayBars[barOneIdx].style;\r\n                const barTwoStyle = arrayBars[barTwoIdx].style;\r\n                setTimeout(() => {\r\n                    barOneStyle.backgroundColor = ALTERED_COLOR;\r\n                    barTwoStyle.backgroundColor = ALTERED_COLOR;\r\n                }, i*ANIMATION_SPEED_MS);\r\n            }\r\n            else if(animations[i].code === 'revert') {\r\n                const [barOneIdx, barTwoIdx] = animations[i].indices;\r\n                const barOneStyle = arrayBars[barOneIdx].style;\r\n                const barTwoStyle = arrayBars[barTwoIdx].style;\r\n                setTimeout(() => {\r\n                    barOneStyle.backgroundColor = BASE_COLOR;\r\n                    barTwoStyle.backgroundColor = BASE_COLOR;\r\n                }, i*ANIMATION_SPEED_MS);\r\n            }\r\n            else { //color element in final position\r\n                const finalIndex = animations[i].index;\r\n                const finalBarStyle = arrayBars[finalIndex].style;\r\n                setTimeout(() => {\r\n                    finalBarStyle.backgroundColor = CORRECT_COLOR;\r\n                }, i*ANIMATION_SPEED_MS);\r\n            }\r\n        }\r\n\r\n        let updatedArray = [];\r\n        const display = document.getElementsByClassName('array-bar')\r\n        for(let i = 0; i < this.state.array.length; i++) {\r\n            updatedArray.push(display[i].style.height);\r\n        }\r\n        this.setState({array: updatedArray});\r\n        \r\n        setTimeout(() => {\r\n            this.enableButtons('bubbleSort');\r\n        }, (animations.length*ANIMATION_SPEED_MS));\r\n    }\r\n\r\n\r\n    heapSort() {\r\n        this.disableButtons('heapSort');\r\n        let animations = heapSortAnimations(this.state.array)\r\n        const arrayBars = document.getElementsByClassName('array-bar')\r\n\r\n        for(let i = 0; i < animations.length; i++) {\r\n        \r\n            if(animations[i].code === 'highlight') {\r\n                const [barOneIdx, barTwoIdx] = animations[i].indices;\r\n                const barOneStyle = arrayBars[barOneIdx].style;\r\n                const barTwoStyle = arrayBars[barTwoIdx].style;\r\n                setTimeout(() => {\r\n                    barOneStyle.backgroundColor = HIGHLIGHT_COLOR;\r\n                    barTwoStyle.backgroundColor = HIGHLIGHT_COLOR;\r\n                }, i*ANIMATION_SPEED_MS);\r\n            }\r\n            else if(animations[i].code === 'swap') {\r\n                const [barOneIdx, barTwoIdx] = animations[i].indices;\r\n                const barOneStyle = arrayBars[barOneIdx].style;\r\n                const barTwoStyle = arrayBars[barTwoIdx].style;\r\n                const [barOneHeight, barTwoHeight] = animations[i].values;\r\n                setTimeout(() => {\r\n                    barOneStyle.height = `${barOneHeight}px`;\r\n                    barTwoStyle.height = `${barTwoHeight}px`;\r\n                }, i*ANIMATION_SPEED_MS);\r\n            }\r\n            else if(animations[i].code === 'correct') {\r\n                const [barOneIdx, barTwoIdx] = animations[i].indices;\r\n                const barOneStyle = arrayBars[barOneIdx].style;\r\n                const barTwoStyle = arrayBars[barTwoIdx].style;\r\n                setTimeout(() => {\r\n                    barOneStyle.backgroundColor = CORRECT_COLOR;\r\n                    barTwoStyle.backgroundColor = CORRECT_COLOR;\r\n                }, i*ANIMATION_SPEED_MS);\r\n            }\r\n            else if(animations[i].code === 'altered') {\r\n                const [barOneIdx, barTwoIdx] = animations[i].indices;\r\n                const barOneStyle = arrayBars[barOneIdx].style;\r\n                const barTwoStyle = arrayBars[barTwoIdx].style;\r\n                setTimeout(() => {\r\n                    barOneStyle.backgroundColor = ALTERED_COLOR;\r\n                    barTwoStyle.backgroundColor = ALTERED_COLOR;\r\n                }, i*ANIMATION_SPEED_MS);\r\n            }\r\n            else if(animations[i].code === 'altered-final') {\r\n                const [barOneIdx, barTwoIdx] = animations[i].indices;\r\n                const barOneStyle = arrayBars[barOneIdx].style;\r\n                const barTwoStyle = arrayBars[barTwoIdx].style;\r\n                setTimeout(() => {\r\n                    barOneStyle.backgroundColor = CORRECT_COLOR;\r\n                    barTwoStyle.backgroundColor = BASE_COLOR;\r\n                }, i*ANIMATION_SPEED_MS);\r\n            }\r\n            else if(animations[i].code === 'parent-child-highlight') {\r\n                const [parentIdx, leftIdx, rightIdx] = animations[i].indices;\r\n                const parentStyle = arrayBars[parentIdx].style;\r\n                const leftStyle = arrayBars[leftIdx].style;\r\n                const rightStyle = arrayBars[rightIdx].style;\r\n                setTimeout(() => {\r\n                    parentStyle.backgroundColor = HIGHLIGHT_COLOR;\r\n                    leftStyle.backgroundColor = HIGHLIGHT_COLOR;\r\n                    rightStyle.backgroundColor = HIGHLIGHT_COLOR;\r\n                }, i*ANIMATION_SPEED_MS);\r\n            }\r\n            else if(animations[i].code === 'child-revert') {\r\n                const childIndex = animations[i].indices;\r\n                const childStyle = arrayBars[childIndex].style;\r\n\r\n                setTimeout(() => {\r\n                    childStyle.backgroundColor = BASE_COLOR;\r\n                }, i*ANIMATION_SPEED_MS);\r\n            }\r\n            else if(animations[i].code === 'revert') {\r\n                const [barOneIdx, barTwoIdx] = animations[i].indices;\r\n                const barOneStyle = arrayBars[barOneIdx].style;\r\n                const barTwoStyle = arrayBars[barTwoIdx].style;\r\n                setTimeout(() => {\r\n                    barOneStyle.backgroundColor = BASE_COLOR;\r\n                    barTwoStyle.backgroundColor = BASE_COLOR;\r\n                }, i*ANIMATION_SPEED_MS);\r\n            }\r\n        }\r\n\r\n        let updatedArray = [];\r\n        const display = document.getElementsByClassName('array-bar')\r\n        for(let i = 0; i < this.state.array.length; i++) {\r\n            updatedArray.push(display[i].style.height);\r\n        }\r\n        this.setState({array: updatedArray});\r\n\r\n        setTimeout(() => {\r\n            this.enableButtons('heapSort');\r\n        }, (animations.length*ANIMATION_SPEED_MS));\r\n    }\r\n\r\n\r\n    quickSort() {\r\n        this.disableButtons('quickSort');\r\n\r\n        let animations = quickSortAnimations(this.state.array);\r\n        const arrayBars = document.getElementsByClassName('array-bar')\r\n\r\n        for(let i = 0; i < animations.length; i++) {\r\n        \r\n            if(animations[i].code === 'highlight') {\r\n                const [barOneIdx, barTwoIdx] = animations[i].indices;\r\n                const barOneStyle = arrayBars[barOneIdx].style;\r\n                const barTwoStyle = arrayBars[barTwoIdx].style;\r\n                setTimeout(() => {\r\n                    barOneStyle.backgroundColor = HIGHLIGHT_COLOR;\r\n                    barTwoStyle.backgroundColor = HIGHLIGHT_COLOR;\r\n                }, i*ANIMATION_SPEED_MS);\r\n            }\r\n            else if(animations[i].code === 'swap') {\r\n                const [barOneIdx, barTwoIdx] = animations[i].indices;\r\n                const barOneStyle = arrayBars[barOneIdx].style;\r\n                const barTwoStyle = arrayBars[barTwoIdx].style;\r\n                const [barOneHeight, barTwoHeight] = animations[i].values;\r\n                setTimeout(() => {\r\n                    barOneStyle.height = `${barOneHeight}px`;\r\n                    barTwoStyle.height = `${barTwoHeight}px`;\r\n                }, i*ANIMATION_SPEED_MS);\r\n            }\r\n            else if(animations[i].code === 'altered') {\r\n                const [barOneIdx, barTwoIdx] = animations[i].indices;\r\n                const barOneStyle = arrayBars[barOneIdx].style;\r\n                const barTwoStyle = arrayBars[barTwoIdx].style;\r\n                setTimeout(() => {\r\n                    barOneStyle.backgroundColor = ALTERED_COLOR;\r\n                    barTwoStyle.backgroundColor = ALTERED_COLOR;\r\n                }, i*ANIMATION_SPEED_MS);\r\n            }\r\n            else if(animations[i].code === 'altered-final') {\r\n                const [barOneIdx, barTwoIdx] = animations[i].indices;\r\n                const barOneStyle = arrayBars[barOneIdx].style;\r\n                const barTwoStyle = arrayBars[barTwoIdx].style;\r\n                setTimeout(() => {\r\n                    barOneStyle.backgroundColor = CORRECT_COLOR;\r\n                    barTwoStyle.backgroundColor = BASE_COLOR;\r\n                }, i*ANIMATION_SPEED_MS);\r\n            }\r\n            else if(animations[i].code === 'final') {\r\n                const barOneIdx = animations[i].indices;\r\n                const barOneStyle = arrayBars[barOneIdx].style;\r\n                setTimeout(() => {\r\n                    barOneStyle.backgroundColor = CORRECT_COLOR;\r\n                }, i*ANIMATION_SPEED_MS);\r\n            }\r\n            else if(animations[i].code === 'revert') {\r\n                const [barOneIdx, barTwoIdx] = animations[i].indices;\r\n                const barOneStyle = arrayBars[barOneIdx].style;\r\n                const barTwoStyle = arrayBars[barTwoIdx].style;\r\n                setTimeout(() => {\r\n                    barOneStyle.backgroundColor = BASE_COLOR;\r\n                    barTwoStyle.backgroundColor = BASE_COLOR;\r\n                }, i*ANIMATION_SPEED_MS);\r\n            }\r\n        }\r\n\r\n        let updatedArray = [];\r\n        const display = document.getElementsByClassName('array-bar')\r\n        for(let i = 0; i < this.state.array.length; i++) {\r\n            updatedArray.push(display[i].style.height);\r\n        }\r\n        this.setState({array: updatedArray});\r\n\r\n        setTimeout(() => {\r\n            this.enableButtons('quickSort');\r\n        }, (animations.length*ANIMATION_SPEED_MS));\r\n\r\n    }\r\n    \r\n    \r\n    disableButtons(algorithm) {\r\n        let buttons = ['newArray', 'mergeSort', 'quickSort', 'heapSort', 'bubbleSort'];\r\n        //let buttons = ['newArray', 'mergeSort', 'quickSort', 'heapSort', 'bubbleSort'];\r\n        for(let i = 0; i < buttons.length; i++) {\r\n            document.getElementById(buttons[i]).disabled = true;\r\n\r\n            if(algorithm === buttons[i]) {\r\n                document.getElementById(buttons[i]).style.backgroundColor = '#fc5185';\r\n                document.getElementById(buttons[i]).style.opacity = 1;\r\n            }\r\n            else {\r\n                document.getElementById(buttons[i]).style.color = 'lightslategrey';\r\n                document.getElementById(buttons[i]).style.borderColor = 'lightslategrey';\r\n            }\r\n        }\r\n    }\r\n\r\n    enableButtons(algorithm) {\r\n        let buttons = ['newArray', 'mergeSort', 'quickSort', 'heapSort', 'bubbleSort'];\r\n        for(let i = 0; i < buttons.length; i++) {\r\n            document.getElementById(buttons[i]).disabled = false;\r\n\r\n            if(algorithm === buttons[i]) {\r\n                document.getElementById(buttons[i]).style.backgroundColor = 'transparent';\r\n                document.getElementById(buttons[i]).style.opacity = 0.7;\r\n\r\n            }\r\n            else {\r\n                document.getElementById(buttons[i]).style.color = '#f0f0f0';\r\n                document.getElementById(buttons[i]).style.borderColor = '#f0f0f0'\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n\r\n    \r\n    \r\n\r\n\r\n    render() {\r\n        return (\r\n        \r\n            <div>\r\n                <div className='nav-bar'>\r\n                    <button class='alg-button' id='newArray'  onClick={() => {this.newArray()} }>Generate New Array</button>\r\n                    <button class='alg-button' id='mergeSort' onClick={() => {this.mergeSort()} }>Merge Sort</button>\r\n                    <button class='alg-button' id='quickSort' onClick={() => {this.quickSort()} }>Quick Sort</button>\r\n                    <button class='alg-button' id='heapSort' onClick={() => {this.heapSort()}}>Heap Sort</button>\r\n                    <button class='alg-button' id='bubbleSort' onClick={() => {this.bubbleSort()}}>Bubble Sort</button>\r\n                </div>\r\n                <div className='array-container'>\r\n                    {this.state.array.map( num => {\r\n                        return <div className='array-bar' style={{height: `${num}px`}} ></div>\r\n                    })}\r\n                    \r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n\r\n}\r\n\r\nfunction randomInt(min, max) {\r\n    return Math.floor(Math.random() * (max - min + 1)) + min;\r\n}","export function bubbleSortAnimations(array) {\r\n    if(array.length < 2) return array;\r\n    const animations = [];\r\n\r\n    let end = array.length-1;\r\n    for(let i = end; i > 0; i--) {\r\n        for(let j = 0; j < i; j++) {\r\n            let highlightElements = {code: 'highlight', indices: [j, j+1]}\r\n            let revertElements = {code: 'revert', indices: [j, j+1]}\r\n            animations.push(highlightElements);\r\n            //animations.push(revertElements);\r\n\r\n            if(array[j] > array[j+1]) {\r\n                let swapElements = {code: 'swap', values: [array[j+1], array[j]], indices: [j, j+1]}\r\n                let alteredElements = {code: 'altered', indices: [j, j+1]}\r\n                animations.push(swapElements);\r\n                animations.push(alteredElements);\r\n                animations.push(revertElements);\r\n\r\n                let temp = array[j];\r\n                array[j]  = array[j+1];\r\n                array[j+1] = temp;\r\n            }\r\n            else {\r\n                let correctElements = {code: 'correct', indices: [j, j+1]}\r\n                animations.push(correctElements);\r\n                animations.push(revertElements);\r\n            }\r\n        }        \r\n        let finalElement = {code: 'final', index: i}\r\n        animations.push(finalElement);\r\n    }\r\n    let finalElement = {code: 'final', index: 0}\r\n    animations.push(finalElement);\r\n    return animations;\r\n}","import React from 'react';\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer';\nimport './App.css';\n\nfunction App() {\n  return (\n    <html>\n      <body className='App'>\n        <div>\n          <SortingVisualizer></SortingVisualizer> \n        </div>\n      </body>\n    </html>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}